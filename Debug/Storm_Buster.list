
Storm_Buster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ac  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001880  08001880  00011880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000064  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000068  20000068  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb21  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b07  00000000  00000000  0002eb55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b60  00000000  00000000  00030660  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a98  00000000  00000000  000311c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a98  00000000  00000000  00031c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038fc  00000000  00000000  000366f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039fec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f60  00000000  00000000  0003a068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001820 	.word	0x08001820

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08001820 	.word	0x08001820

080001cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  uwTick++;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <HAL_IncTick+0x18>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <HAL_IncTick+0x18>)
 80001d8:	6013      	str	r3, [r2, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	20000020 	.word	0x20000020

080001e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d122      	bne.n	8000244 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	f003 0302 	and.w	r3, r3, #2
 8000208:	2b02      	cmp	r3, #2
 800020a:	d11b      	bne.n	8000244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f06f 0202 	mvn.w	r2, #2
 8000214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2201      	movs	r2, #1
 800021a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	f003 0303 	and.w	r3, r3, #3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8ee 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000230:	e005      	b.n	800023e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f8e0 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f8f1 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	f003 0304 	and.w	r3, r3, #4
 800024e:	2b04      	cmp	r3, #4
 8000250:	d122      	bne.n	8000298 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	f003 0304 	and.w	r3, r3, #4
 800025c:	2b04      	cmp	r3, #4
 800025e:	d11b      	bne.n	8000298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f06f 0204 	mvn.w	r2, #4
 8000268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2202      	movs	r2, #2
 800026e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800027a:	2b00      	cmp	r3, #0
 800027c:	d003      	beq.n	8000286 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f000 f8c4 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000284:	e005      	b.n	8000292 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f8b6 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f000 f8c7 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	f003 0308 	and.w	r3, r3, #8
 80002a2:	2b08      	cmp	r3, #8
 80002a4:	d122      	bne.n	80002ec <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	2b08      	cmp	r3, #8
 80002b2:	d11b      	bne.n	80002ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f06f 0208 	mvn.w	r2, #8
 80002bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2204      	movs	r2, #4
 80002c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f003 0303 	and.w	r3, r3, #3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 f89a 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 80002d8:	e005      	b.n	80002e6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f88c 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 f89d 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	f003 0310 	and.w	r3, r3, #16
 80002f6:	2b10      	cmp	r3, #16
 80002f8:	d122      	bne.n	8000340 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	2b10      	cmp	r3, #16
 8000306:	d11b      	bne.n	8000340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f06f 0210 	mvn.w	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2208      	movs	r2, #8
 8000316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000322:	2b00      	cmp	r3, #0
 8000324:	d003      	beq.n	800032e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f870 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 800032c:	e005      	b.n	800033a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f000 f862 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f873 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2200      	movs	r2, #0
 800033e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b01      	cmp	r3, #1
 800034c:	d10e      	bne.n	800036c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	2b01      	cmp	r3, #1
 800035a:	d107      	bne.n	800036c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f06f 0201 	mvn.w	r2, #1
 8000364:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f882 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000376:	2b80      	cmp	r3, #128	; 0x80
 8000378:	d10e      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	d107      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000390:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f862 	bl	800045c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d10e      	bne.n	80003c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	2b40      	cmp	r3, #64	; 0x40
 80003b2:	d107      	bne.n	80003c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80003bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f000 f838 	bl	8000434 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	f003 0320 	and.w	r3, r3, #32
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d10e      	bne.n	80003f0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	2b20      	cmp	r3, #32
 80003de:	d107      	bne.n	80003f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f06f 0220 	mvn.w	r2, #32
 80003e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f82c 	bl	8000448 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8000478:	f7ff fea8 	bl	80001cc <HAL_IncTick>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <TIM6_DAC_IRQHandler+0x10>)
 800048a:	f7ff fead 	bl	80001e8 <HAL_TIM_IRQHandler>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000024 	.word	0x20000024

08000498 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f043 0201 	orr.w	r2, r3, #1
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	601a      	str	r2, [r3, #0]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	f023 0201 	bic.w	r2, r3, #1
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	601a      	str	r2, [r3, #0]
}
 80004cc:	bf00      	nop
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr

080004d8 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	0219      	lsls	r1, r3, #8
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	430b      	orrs	r3, r1
 80004f4:	431a      	orrs	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	601a      	str	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	60f8      	str	r0, [r7, #12]
 800050e:	60b9      	str	r1, [r7, #8]
 8000510:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800051a:	f023 0307 	bic.w	r3, r3, #7
 800051e:	68b9      	ldr	r1, [r7, #8]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	430a      	orrs	r2, r1
 8000524:	431a      	orrs	r2, r3
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	609a      	str	r2, [r3, #8]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	609a      	str	r2, [r3, #8]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	689b      	ldr	r3, [r3, #8]
 8000562:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	609a      	str	r2, [r3, #8]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	611a      	str	r2, [r3, #16]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	431a      	orrs	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	601a      	str	r2, [r3, #0]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	431a      	orrs	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	605a      	str	r2, [r3, #4]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b082      	sub	sp, #8
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	6078      	str	r0, [r7, #4]
 80005e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ff65 	bl	80004b8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	6899      	ldr	r1, [r3, #8]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	461a      	mov	r2, r3
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff6d 	bl	80004d8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f7ff ffb6 	bl	8000576 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ff44 	bl	8000498 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffa0 	bl	8000556 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	6919      	ldr	r1, [r3, #16]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	461a      	mov	r2, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ff70 	bl	8000506 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d002      	beq.n	8000634 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800062e:	6878      	ldr	r0, [r7, #4]
 8000630:	f7ff ff81 	bl	8000536 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff ffa9 	bl	8000592 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	695b      	ldr	r3, [r3, #20]
 8000644:	4619      	mov	r1, r3
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ffb6 	bl	80005b8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800064c:	2301      	movs	r3, #1
}
 800064e:	4618      	mov	r0, r3
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <LL_RCC_HSI_IsReady+0x24>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000668:	bf0c      	ite	eq
 800066a:	2301      	moveq	r3, #1
 800066c:	2300      	movne	r3, #0
 800066e:	b2db      	uxtb	r3, r3
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <LL_RCC_LSE_IsReady+0x24>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	2b02      	cmp	r3, #2
 8000690:	bf0c      	ite	eq
 8000692:	2301      	moveq	r3, #1
 8000694:	2300      	movne	r3, #0
 8000696:	b2db      	uxtb	r3, r3
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL));
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b08      	cmp	r3, #8
 80006b6:	bf0c      	ite	eq
 80006b8:	2301      	moveq	r3, #1
 80006ba:	2300      	movne	r3, #0
 80006bc:	b2db      	uxtb	r3, r3
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80006d0:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <LL_RCC_MSI_GetRange+0x18>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80006ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_RCC_GetSysClkSource+0x18>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f003 030c 	and.w	r3, r3, #12
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <LL_RCC_GetAHBPrescaler+0x18>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <LL_RCC_GetAPB1Prescaler+0x18>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <LL_RCC_GetAPB2Prescaler+0x18>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_GetUSARTClockSource+0x24>)
 800077e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	401a      	ands	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	4313      	orrs	r3, r2
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40021000 	.word	0x40021000

0800079c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <LL_RCC_PLL_GetN+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <LL_RCC_PLL_GetR+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <LL_RCC_PLL_GetMainSource+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	f003 0303 	and.w	r3, r3, #3
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <LL_RCC_PLL_GetDivider+0x18>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d12e      	bne.n	800087c <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ffa8 	bl	8000774 <LL_RCC_GetUSARTClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	4a4f      	ldr	r2, [pc, #316]	; (8000964 <LL_RCC_GetUSARTClockFreq+0x158>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d009      	beq.n	8000840 <LL_RCC_GetUSARTClockFreq+0x34>
 800082c:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8000830:	d00e      	beq.n	8000850 <LL_RCC_GetUSARTClockFreq+0x44>
 8000832:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <LL_RCC_GetUSARTClockFreq+0x15c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d114      	bne.n	8000862 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8000838:	f000 f8a2 	bl	8000980 <RCC_GetSystemClockFreq>
 800083c:	60f8      	str	r0, [r7, #12]
        break;
 800083e:	e08b      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8000840:	f7ff ff0a 	bl	8000658 <LL_RCC_HSI_IsReady>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d07b      	beq.n	8000942 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 800084a:	4b48      	ldr	r3, [pc, #288]	; (800096c <LL_RCC_GetUSARTClockFreq+0x160>)
 800084c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800084e:	e078      	b.n	8000942 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8000850:	f7ff ff16 	bl	8000680 <LL_RCC_LSE_IsReady>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d075      	beq.n	8000946 <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 800085a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800085e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8000860:	e071      	b.n	8000946 <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000862:	f000 f88d 	bl	8000980 <RCC_GetSystemClockFreq>
 8000866:	4603      	mov	r3, r0
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f91b 	bl	8000aa4 <RCC_GetHCLKClockFreq>
 800086e:	4603      	mov	r3, r0
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f941 	bl	8000af8 <RCC_GetPCLK2ClockFreq>
 8000876:	60f8      	str	r0, [r7, #12]
        break;
 8000878:	bf00      	nop
 800087a:	e06d      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b0c      	cmp	r3, #12
 8000880:	d12e      	bne.n	80008e0 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ff76 	bl	8000774 <LL_RCC_GetUSARTClockSource>
 8000888:	4603      	mov	r3, r0
 800088a:	4a39      	ldr	r2, [pc, #228]	; (8000970 <LL_RCC_GetUSARTClockFreq+0x164>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d009      	beq.n	80008a4 <LL_RCC_GetUSARTClockFreq+0x98>
 8000890:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000894:	d00e      	beq.n	80008b4 <LL_RCC_GetUSARTClockFreq+0xa8>
 8000896:	4a37      	ldr	r2, [pc, #220]	; (8000974 <LL_RCC_GetUSARTClockFreq+0x168>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d114      	bne.n	80008c6 <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800089c:	f000 f870 	bl	8000980 <RCC_GetSystemClockFreq>
 80008a0:	60f8      	str	r0, [r7, #12]
        break;
 80008a2:	e059      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 80008a4:	f7ff fed8 	bl	8000658 <LL_RCC_HSI_IsReady>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d04d      	beq.n	800094a <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <LL_RCC_GetUSARTClockFreq+0x160>)
 80008b0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80008b2:	e04a      	b.n	800094a <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80008b4:	f7ff fee4 	bl	8000680 <LL_RCC_LSE_IsReady>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d047      	beq.n	800094e <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 80008be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80008c4:	e043      	b.n	800094e <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80008c6:	f000 f85b 	bl	8000980 <RCC_GetSystemClockFreq>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 f8e9 	bl	8000aa4 <RCC_GetHCLKClockFreq>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 f8fb 	bl	8000ad0 <RCC_GetPCLK1ClockFreq>
 80008da:	60f8      	str	r0, [r7, #12]
        break;
 80008dc:	bf00      	nop
 80008de:	e03b      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b30      	cmp	r3, #48	; 0x30
 80008e4:	d138      	bne.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff44 	bl	8000774 <LL_RCC_GetUSARTClockSource>
 80008ec:	4603      	mov	r3, r0
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <LL_RCC_GetUSARTClockFreq+0x16c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d009      	beq.n	8000908 <LL_RCC_GetUSARTClockFreq+0xfc>
 80008f4:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80008f8:	d00e      	beq.n	8000918 <LL_RCC_GetUSARTClockFreq+0x10c>
 80008fa:	4a20      	ldr	r2, [pc, #128]	; (800097c <LL_RCC_GetUSARTClockFreq+0x170>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d114      	bne.n	800092a <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8000900:	f000 f83e 	bl	8000980 <RCC_GetSystemClockFreq>
 8000904:	60f8      	str	r0, [r7, #12]
          break;
 8000906:	e027      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8000908:	f7ff fea6 	bl	8000658 <LL_RCC_HSI_IsReady>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d01f      	beq.n	8000952 <LL_RCC_GetUSARTClockFreq+0x146>
          {
            usart_frequency = HSI_VALUE;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <LL_RCC_GetUSARTClockFreq+0x160>)
 8000914:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000916:	e01c      	b.n	8000952 <LL_RCC_GetUSARTClockFreq+0x146>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8000918:	f7ff feb2 	bl	8000680 <LL_RCC_LSE_IsReady>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d019      	beq.n	8000956 <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = LSE_VALUE;
 8000922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000926:	60fb      	str	r3, [r7, #12]
          }
          break;
 8000928:	e015      	b.n	8000956 <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800092a:	f000 f829 	bl	8000980 <RCC_GetSystemClockFreq>
 800092e:	4603      	mov	r3, r0
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f8b7 	bl	8000aa4 <RCC_GetHCLKClockFreq>
 8000936:	4603      	mov	r3, r0
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f8c9 	bl	8000ad0 <RCC_GetPCLK1ClockFreq>
 800093e:	60f8      	str	r0, [r7, #12]
          break;
 8000940:	e00a      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000942:	bf00      	nop
 8000944:	e008      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 8000946:	bf00      	nop
 8000948:	e006      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800094a:	bf00      	nop
 800094c:	e004      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
        break;
 800094e:	bf00      	nop
 8000950:	e002      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000952:	bf00      	nop
 8000954:	e000      	b.n	8000958 <LL_RCC_GetUSARTClockFreq+0x14c>
          break;
 8000956:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	00030002 	.word	0x00030002
 8000968:	00030001 	.word	0x00030001
 800096c:	00f42400 	.word	0x00f42400
 8000970:	000c0008 	.word	0x000c0008
 8000974:	000c0004 	.word	0x000c0004
 8000978:	00300020 	.word	0x00300020
 800097c:	00300010 	.word	0x00300010

08000980 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800098a:	f7ff febb 	bl	8000704 <LL_RCC_GetSysClkSource>
 800098e:	4603      	mov	r3, r0
 8000990:	2b0c      	cmp	r3, #12
 8000992:	d851      	bhi.n	8000a38 <RCC_GetSystemClockFreq+0xb8>
 8000994:	a201      	add	r2, pc, #4	; (adr r2, 800099c <RCC_GetSystemClockFreq+0x1c>)
 8000996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800099a:	bf00      	nop
 800099c:	080009d1 	.word	0x080009d1
 80009a0:	08000a39 	.word	0x08000a39
 80009a4:	08000a39 	.word	0x08000a39
 80009a8:	08000a39 	.word	0x08000a39
 80009ac:	08000a25 	.word	0x08000a25
 80009b0:	08000a39 	.word	0x08000a39
 80009b4:	08000a39 	.word	0x08000a39
 80009b8:	08000a39 	.word	0x08000a39
 80009bc:	08000a2b 	.word	0x08000a2b
 80009c0:	08000a39 	.word	0x08000a39
 80009c4:	08000a39 	.word	0x08000a39
 80009c8:	08000a39 	.word	0x08000a39
 80009cc:	08000a31 	.word	0x08000a31
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80009d0:	f7ff fe6a 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d111      	bne.n	80009fe <RCC_GetSystemClockFreq+0x7e>
 80009da:	f7ff fe65 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <RCC_GetSystemClockFreq+0x6e>
 80009e4:	f7ff fe72 	bl	80006cc <LL_RCC_MSI_GetRange>
 80009e8:	4603      	mov	r3, r0
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	e003      	b.n	80009f6 <RCC_GetSystemClockFreq+0x76>
 80009ee:	f7ff fe7b 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 80009f2:	4603      	mov	r3, r0
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <RCC_GetSystemClockFreq+0x118>)
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	e010      	b.n	8000a20 <RCC_GetSystemClockFreq+0xa0>
 80009fe:	f7ff fe53 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d004      	beq.n	8000a12 <RCC_GetSystemClockFreq+0x92>
 8000a08:	f7ff fe60 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	091b      	lsrs	r3, r3, #4
 8000a10:	e003      	b.n	8000a1a <RCC_GetSystemClockFreq+0x9a>
 8000a12:	f7ff fe69 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000a16:	4603      	mov	r3, r0
 8000a18:	091b      	lsrs	r3, r3, #4
 8000a1a:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <RCC_GetSystemClockFreq+0x118>)
 8000a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a20:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000a22:	e033      	b.n	8000a8c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <RCC_GetSystemClockFreq+0x11c>)
 8000a26:	607b      	str	r3, [r7, #4]
      break;
 8000a28:	e030      	b.n	8000a8c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000a2a:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <RCC_GetSystemClockFreq+0x120>)
 8000a2c:	607b      	str	r3, [r7, #4]
      break;
 8000a2e:	e02d      	b.n	8000a8c <RCC_GetSystemClockFreq+0x10c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000a30:	f000 f876 	bl	8000b20 <RCC_PLL_GetFreqDomain_SYS>
 8000a34:	6078      	str	r0, [r7, #4]
      break;
 8000a36:	e029      	b.n	8000a8c <RCC_GetSystemClockFreq+0x10c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000a38:	f7ff fe36 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <RCC_GetSystemClockFreq+0xe6>
 8000a42:	f7ff fe31 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d004      	beq.n	8000a56 <RCC_GetSystemClockFreq+0xd6>
 8000a4c:	f7ff fe3e 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000a50:	4603      	mov	r3, r0
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	e003      	b.n	8000a5e <RCC_GetSystemClockFreq+0xde>
 8000a56:	f7ff fe47 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <RCC_GetSystemClockFreq+0x118>)
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	e010      	b.n	8000a88 <RCC_GetSystemClockFreq+0x108>
 8000a66:	f7ff fe1f 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <RCC_GetSystemClockFreq+0xfa>
 8000a70:	f7ff fe2c 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000a74:	4603      	mov	r3, r0
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	e003      	b.n	8000a82 <RCC_GetSystemClockFreq+0x102>
 8000a7a:	f7ff fe35 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	091b      	lsrs	r3, r3, #4
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <RCC_GetSystemClockFreq+0x118>)
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000a8a:	bf00      	nop
  }

  return frequency;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	08001850 	.word	0x08001850
 8000a9c:	00f42400 	.word	0x00f42400
 8000aa0:	007a1200 	.word	0x007a1200

08000aa4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000aac:	f7ff fe38 	bl	8000720 <LL_RCC_GetAHBPrescaler>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <RCC_GetHCLKClockFreq+0x28>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	40d3      	lsrs	r3, r2
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08001838 	.word	0x08001838

08000ad0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000ad8:	f7ff fe30 	bl	800073c <LL_RCC_GetAPB1Prescaler>
 8000adc:	4603      	mov	r3, r0
 8000ade:	0a1b      	lsrs	r3, r3, #8
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <RCC_GetPCLK1ClockFreq+0x24>)
 8000ae2:	5cd3      	ldrb	r3, [r2, r3]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	40d3      	lsrs	r3, r2
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	08001848 	.word	0x08001848

08000af8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000b00:	f7ff fe2a 	bl	8000758 <LL_RCC_GetAPB2Prescaler>
 8000b04:	4603      	mov	r3, r0
 8000b06:	0adb      	lsrs	r3, r3, #11
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <RCC_GetPCLK2ClockFreq+0x24>)
 8000b0a:	5cd3      	ldrb	r3, [r2, r3]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	40d3      	lsrs	r3, r2
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	08001848 	.word	0x08001848

08000b20 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000b2e:	f7ff fe51 	bl	80007d4 <LL_RCC_PLL_GetMainSource>
 8000b32:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d02d      	beq.n	8000b96 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d02e      	beq.n	8000b9c <RCC_PLL_GetFreqDomain_SYS+0x7c>
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d12f      	bne.n	8000ba2 <RCC_PLL_GetFreqDomain_SYS+0x82>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000b42:	f7ff fdb1 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <RCC_PLL_GetFreqDomain_SYS+0x50>
 8000b4c:	f7ff fdac 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8000b56:	f7ff fdb9 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	e003      	b.n	8000b68 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8000b60:	f7ff fdc2 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b64:	4603      	mov	r3, r0
 8000b66:	0a1b      	lsrs	r3, r3, #8
 8000b68:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	e010      	b.n	8000b92 <RCC_PLL_GetFreqDomain_SYS+0x72>
 8000b70:	f7ff fd9a 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8000b7a:	f7ff fda7 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	091b      	lsrs	r3, r3, #4
 8000b82:	e003      	b.n	8000b8c <RCC_PLL_GetFreqDomain_SYS+0x6c>
 8000b84:	f7ff fdb0 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	4a26      	ldr	r2, [pc, #152]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b92:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000b94:	e02f      	b.n	8000bf6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8000b98:	607b      	str	r3, [r7, #4]
      break;
 8000b9a:	e02c      	b.n	8000bf6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8000b9e:	607b      	str	r3, [r7, #4]
      break;
 8000ba0:	e029      	b.n	8000bf6 <RCC_PLL_GetFreqDomain_SYS+0xd6>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8000ba2:	f7ff fd81 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d111      	bne.n	8000bd0 <RCC_PLL_GetFreqDomain_SYS+0xb0>
 8000bac:	f7ff fd7c 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8000bb6:	f7ff fd89 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	e003      	b.n	8000bc8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8000bc0:	f7ff fd92 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	e010      	b.n	8000bf2 <RCC_PLL_GetFreqDomain_SYS+0xd2>
 8000bd0:	f7ff fd6a 	bl	80006a8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d004      	beq.n	8000be4 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8000bda:	f7ff fd77 	bl	80006cc <LL_RCC_MSI_GetRange>
 8000bde:	4603      	mov	r3, r0
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	e003      	b.n	8000bec <RCC_PLL_GetFreqDomain_SYS+0xcc>
 8000be4:	f7ff fd80 	bl	80006e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8000be8:	4603      	mov	r3, r0
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8000bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf2:	607b      	str	r3, [r7, #4]
                                    (LL_RCC_MSI_IsEnabledRangeSelect() ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8000bf4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8000bf6:	f7ff fdfb 	bl	80007f0 <LL_RCC_PLL_GetDivider>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	091b      	lsrs	r3, r3, #4
 8000bfe:	3301      	adds	r3, #1
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	fbb2 f4f3 	udiv	r4, r2, r3
 8000c06:	f7ff fdc9 	bl	800079c <LL_RCC_PLL_GetN>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	fb03 f404 	mul.w	r4, r3, r4
 8000c10:	f7ff fdd2 	bl	80007b8 <LL_RCC_PLL_GetR>
 8000c14:	4603      	mov	r3, r0
 8000c16:	0e5b      	lsrs	r3, r3, #25
 8000c18:	3301      	adds	r3, #1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	08001850 	.word	0x08001850
 8000c2c:	00f42400 	.word	0x00f42400
 8000c30:	007a1200 	.word	0x007a1200

08000c34 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE));
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c44:	2b40      	cmp	r3, #64	; 0x40
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	461a      	mov	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	611a      	str	r2, [r3, #16]
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000c84:	2300      	movs	r3, #0
 8000c86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ffd3 	bl	8000c34 <LL_SPI_IsEnabled>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d13b      	bne.n	8000d0c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c9c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	6811      	ldr	r1, [r2, #0]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	6852      	ldr	r2, [r2, #4]
 8000ca8:	4311      	orrs	r1, r2
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	68d2      	ldr	r2, [r2, #12]
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	6912      	ldr	r2, [r2, #16]
 8000cb4:	4311      	orrs	r1, r2
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	6952      	ldr	r2, [r2, #20]
 8000cba:	4311      	orrs	r1, r2
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	6992      	ldr	r2, [r2, #24]
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	69d2      	ldr	r2, [r2, #28]
 8000cc6:	4311      	orrs	r1, r2
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	6a12      	ldr	r2, [r2, #32]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000cdc:	f023 0304 	bic.w	r3, r3, #4
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	6891      	ldr	r1, [r2, #8]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	6952      	ldr	r2, [r2, #20]
 8000ce8:	0c12      	lsrs	r2, r2, #16
 8000cea:	430a      	orrs	r2, r1
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfa:	d105      	bne.n	8000d08 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa9 	bl	8000c5a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	605a      	str	r2, [r3, #4]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <LL_USART_SetBaudRate>:
                                          uint32_t BaudRate)
#else
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
#endif
{
 8000d88:	b4b0      	push	{r4, r5, r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8000d96:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8000d98:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000da0:	d114      	bne.n	8000dcc <LL_USART_SetBaudRate+0x44>
  {
#if defined(USART_PRESC_PRESCALER)
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, PrescalerValue, BaudRate));
#else
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	005a      	lsls	r2, r3, #1
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	085b      	lsrs	r3, r3, #1
 8000daa:	441a      	add	r2, r3
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461d      	mov	r5, r3
#endif
    brrtemp = usartdiv & 0xFFF0U;
 8000db6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8000dba:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000dbc:	086b      	lsrs	r3, r5, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	60dc      	str	r4, [r3, #12]
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, PrescalerValue, BaudRate));
#else
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
#endif
  }
}
 8000dca:	e00a      	b.n	8000de2 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	085a      	lsrs	r2, r3, #1
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	441a      	add	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	60da      	str	r2, [r3, #12]
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bcb0      	pop	{r4, r5, r7}
 8000dea:	4770      	bx	lr

08000dec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff89 	bl	8000d16 <LL_USART_IsEnabled>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d148      	bne.n	8000e9c <LL_USART_Init+0xb0>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <LL_USART_Init+0xbc>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6851      	ldr	r1, [r2, #4]
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	68d2      	ldr	r2, [r2, #12]
 8000e1a:	4311      	orrs	r1, r2
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	6912      	ldr	r2, [r2, #16]
 8000e20:	4311      	orrs	r1, r2
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	6992      	ldr	r2, [r2, #24]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff81 	bl	8000d3c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff8e 	bl	8000d62 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <LL_USART_Init+0xc0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d104      	bne.n	8000e58 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f7ff fcdc 	bl	800080c <LL_RCC_GetUSARTClockFreq>
 8000e54:	60b8      	str	r0, [r7, #8]
 8000e56:	e010      	b.n	8000e7a <LL_USART_Init+0x8e>
    }
    else if (USARTx == USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <LL_USART_Init+0xc4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d104      	bne.n	8000e6a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8000e60:	200c      	movs	r0, #12
 8000e62:	f7ff fcd3 	bl	800080c <LL_RCC_GetUSARTClockFreq>
 8000e66:	60b8      	str	r0, [r7, #8]
 8000e68:	e007      	b.n	8000e7a <LL_USART_Init+0x8e>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <LL_USART_Init+0xc8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d103      	bne.n	8000e7a <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8000e72:	2030      	movs	r0, #48	; 0x30
 8000e74:	f7ff fcca 	bl	800080c <LL_RCC_GetUSARTClockFreq>
 8000e78:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <LL_USART_Init+0xb0>
        && (USART_InitStruct->BaudRate != 0U))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d009      	beq.n	8000e9c <LL_USART_Init+0xb0>
    {
      status = SUCCESS;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	699a      	ldr	r2, [r3, #24]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ff76 	bl	8000d88 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	efff69f3 	.word	0xefff69f3
 8000eac:	40013800 	.word	0x40013800
 8000eb0:	40004400 	.word	0x40004400
 8000eb4:	40004800 	.word	0x40004800

08000eb8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da0b      	bge.n	8000f00 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	490d      	ldr	r1, [pc, #52]	; (8000f20 <NVIC_SetPriority+0x4c>)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 030f 	and.w	r3, r3, #15
 8000ef0:	3b04      	subs	r3, #4
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	0112      	lsls	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	440b      	add	r3, r1
 8000efc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efe:	e009      	b.n	8000f14 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	4908      	ldr	r1, [pc, #32]	; (8000f24 <NVIC_SetPriority+0x50>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	1e5a      	subs	r2, r3, #1
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6e:	2101      	movs	r1, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	1e59      	subs	r1, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff90 	bl	8000ed4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fd8:	4908      	ldr	r1, [pc, #32]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4013      	ands	r3, r2
 8000fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40021000 	.word	0x40021000

08001000 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001008:	4908      	ldr	r1, [pc, #32]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 800100c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4313      	orrs	r3, r2
 8001012:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001016:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d106      	bne.n	800104c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <LL_SYSTICK_SetClkSource+0x34>)
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <LL_SYSTICK_SetClkSource+0x34>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f043 0304 	orr.w	r3, r3, #4
 8001048:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800104a:	e005      	b.n	8001058 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800104c:	4a05      	ldr	r2, [pc, #20]	; (8001064 <LL_SYSTICK_SetClkSource+0x34>)
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <LL_SYSTICK_SetClkSource+0x34>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 0304 	bic.w	r3, r3, #4
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e010 	.word	0xe000e010

08001068 <LL_SYSTICK_DisableIT>:
  * @brief  Disable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_DisableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_DisableIT(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800106c:	4a05      	ldr	r2, [pc, #20]	; (8001084 <LL_SYSTICK_DisableIT+0x1c>)
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_SYSTICK_DisableIT+0x1c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0302 	bic.w	r3, r3, #2
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <LL_RCC_HSE_EnableBypass>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <LL_RCC_HSE_EnableBypass+0x1c>)
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <LL_RCC_HSE_EnableBypass+0x1c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <LL_RCC_HSE_Enable>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <LL_RCC_HSE_Enable+0x1c>)
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <LL_RCC_HSE_Enable+0x1c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <LL_RCC_HSE_IsReady>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <LL_RCC_HSE_IsReady+0x24>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <LL_RCC_SetSysClkSource>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <LL_RCC_SetSysClkSource+0x24>)
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <LL_RCC_SetSysClkSource+0x24>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f023 0203 	bic.w	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40021000 	.word	0x40021000

08001118 <LL_RCC_GetSysClkSource>:
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <LL_RCC_GetSysClkSource+0x18>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 030c 	and.w	r3, r3, #12
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <LL_RCC_SetAHBPrescaler>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <LL_RCC_SetAHBPrescaler+0x24>)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <LL_RCC_SetAHBPrescaler+0x24>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000

0800115c <LL_RCC_SetAPB1Prescaler>:
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	608b      	str	r3, [r1, #8]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000

08001184 <LL_RCC_SetAPB2Prescaler>:
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <LL_RCC_ConfigMCO>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <LL_RCC_ConfigMCO+0x2c>)
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <LL_RCC_ConfigMCO+0x2c>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	430b      	orrs	r3, r1
 80011c6:	4313      	orrs	r3, r2
 80011c8:	6083      	str	r3, [r0, #8]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <LL_RCC_SetI2CClockSource>:
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U)); 
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0e1a      	lsrs	r2, r3, #24
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <LL_RCC_SetI2CClockSource+0x48>)
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0c1b      	lsrs	r3, r3, #16
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2103      	movs	r1, #3
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	401a      	ands	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	b2d9      	uxtb	r1, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	b2db      	uxtb	r3, r3
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	431a      	orrs	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021088 	.word	0x40021088

08001228 <LL_RCC_PLL_Enable>:
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800122c:	4a05      	ldr	r2, [pc, #20]	; (8001244 <LL_RCC_PLL_Enable+0x1c>)
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <LL_RCC_PLL_Enable+0x1c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <LL_RCC_PLL_IsReady>:
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <LL_RCC_PLL_IsReady+0x24>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
}
 8001260:	4618      	mov	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000

08001270 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001286:	4013      	ands	r3, r2
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	4311      	orrs	r1, r2
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	0212      	lsls	r2, r2, #8
 8001292:	4311      	orrs	r1, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	4313      	orrs	r3, r2
 800129a:	60c3      	str	r3, [r0, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	40021000 	.word	0x40021000
 80012ac:	f9ff808c 	.word	0xf9ff808c

080012b0 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <LL_SPI_Enable>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_SPI_SetRxFIFOThreshold>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_I2C_Enable>:
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <LL_I2C_Disable>:
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 0201 	bic.w	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_USART_Enable>:
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f043 0201 	orr.w	r2, r3, #1
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_USART_DisableSCLKOutput>:
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	605a      	str	r2, [r3, #4]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SystemClock_Config>:
#include "Periph_Init.h"


void SystemClock_Config(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800139c:	2001      	movs	r0, #1
 800139e:	f7ff fe2f 	bl	8001000 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80013a2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80013a6:	f7ff fe13 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

	LL_RCC_HSE_Enable();
 80013aa:	f7ff fe7d 	bl	80010a8 <LL_RCC_HSE_Enable>
	LL_RCC_HSE_EnableBypass();
 80013ae:	f7ff fe6b 	bl	8001088 <LL_RCC_HSE_EnableBypass>

	while (LL_RCC_HSE_IsReady() != 1) {}
 80013b2:	bf00      	nop
 80013b4:	f7ff fe88 	bl	80010c8 <LL_RCC_HSE_IsReady>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d1fa      	bne.n	80013b4 <SystemClock_Config+0x1c>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 16,LL_RCC_PLLR_DIV_4);
 80013be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c2:	2210      	movs	r2, #16
 80013c4:	2100      	movs	r1, #0
 80013c6:	2003      	movs	r0, #3
 80013c8:	f7ff ff52 	bl	8001270 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_EnableDomain_SYS();
 80013cc:	f7ff ff70 	bl	80012b0 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 80013d0:	f7ff ff2a 	bl	8001228 <LL_RCC_PLL_Enable>

	while (LL_RCC_PLL_IsReady() != 1) {}
 80013d4:	bf00      	nop
 80013d6:	f7ff ff37 	bl	8001248 <LL_RCC_PLL_IsReady>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d1fa      	bne.n	80013d6 <SystemClock_Config+0x3e>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f7ff fe85 	bl	80010f0 <LL_RCC_SetSysClkSource>

	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 80013e6:	bf00      	nop
 80013e8:	f7ff fe96 	bl	8001118 <LL_RCC_GetSysClkSource>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b0c      	cmp	r3, #12
 80013f0:	d1fa      	bne.n	80013e8 <SystemClock_Config+0x50>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f7ff fe9e 	bl	8001134 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff feaf 	bl	800115c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fec0 	bl	8001184 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 8001404:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8001408:	f7ff fee8 	bl	80011dc <LL_RCC_SetI2CClockSource>

	LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1);
 800140c:	2100      	movs	r1, #0
 800140e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001412:	f7ff fecb 	bl	80011ac <LL_RCC_ConfigMCO>

	SystemCoreClockUpdate();
 8001416:	f000 f8fb 	bl	8001610 <SystemCoreClockUpdate>

	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800141a:	2004      	movs	r0, #4
 800141c:	f7ff fe08 	bl	8001030 <LL_SYSTICK_SetClkSource>
	SysTick_Config(SystemCoreClock / 100000);
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <SystemClock_Config+0xc0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	095b      	lsrs	r3, r3, #5
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <SystemClock_Config+0xc4>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	09db      	lsrs	r3, r3, #7
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fdac 	bl	8000f8c <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8001434:	f7ff fd40 	bl	8000eb8 <NVIC_GetPriorityGrouping>
 8001438:	4603      	mov	r3, r0
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fd72 	bl	8000f28 <NVIC_EncodePriority>
 8001444:	4603      	mov	r3, r0
 8001446:	4619      	mov	r1, r3
 8001448:	f04f 30ff 	mov.w	r0, #4294967295
 800144c:	f7ff fd42 	bl	8000ed4 <NVIC_SetPriority>
	LL_SYSTICK_DisableIT();
 8001450:	f7ff fe0a 	bl	8001068 <LL_SYSTICK_DisableIT>

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000000 	.word	0x20000000
 800145c:	0a7c5ac5 	.word	0x0a7c5ac5

08001460 <SPI2_Init>:


}

void SPI2_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct;
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001466:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800146a:	f7ff fdb1 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001472:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001476:	607b      	str	r3, [r7, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001478:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800147c:	60bb      	str	r3, [r7, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148a:	617b      	str	r3, [r7, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64;
 800148c:	2328      	movs	r3, #40	; 0x28
 800148e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.CRCPoly = 7;
 8001498:	2307      	movs	r3, #7
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
  LL_SPI_SetRxFIFOThreshold(SPI2,LL_SPI_RX_FIFO_TH_QUARTER);
 800149c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <SPI2_Init+0x60>)
 80014a2:	f7ff ff25 	bl	80012f0 <LL_SPI_SetRxFIFOThreshold>
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <SPI2_Init+0x60>)
 80014ac:	f7ff fbe5 	bl	8000c7a <LL_SPI_Init>
  LL_SPI_Enable(SPI2);
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <SPI2_Init+0x60>)
 80014b2:	f7ff ff0d 	bl	80012d0 <LL_SPI_Enable>

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40003800 	.word	0x40003800

080014c4 <USART2_Init>:

void USART2_Init(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0

	LL_USART_InitTypeDef USART_InitStruct;
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80014ca:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014ce:	f7ff fd7f 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>

	USART_InitStruct.BaudRate=115200;
 80014d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014d6:	607b      	str	r3, [r7, #4]
	USART_InitStruct.DataWidth=LL_USART_DATAWIDTH_8B;
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
	USART_InitStruct.HardwareFlowControl=LL_USART_HWCONTROL_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
	USART_InitStruct.OverSampling=LL_USART_OVERSAMPLING_8;
 80014e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014e4:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.Parity=LL_USART_PARITY_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
	USART_InitStruct.StopBits=LL_USART_STOPBITS_1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
	USART_InitStruct.TransferDirection=LL_USART_DIRECTION_TX_RX;
 80014ee:	230c      	movs	r3, #12
 80014f0:	617b      	str	r3, [r7, #20]
	LL_USART_DisableSCLKOutput(USART2);
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <USART2_Init+0x4c>)
 80014f4:	f7ff ff3f 	bl	8001376 <LL_USART_DisableSCLKOutput>
	LL_USART_Init(USART2,&USART_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <USART2_Init+0x4c>)
 80014fe:	f7ff fc75 	bl	8000dec <LL_USART_Init>
	LL_USART_Enable(USART2);
 8001502:	4803      	ldr	r0, [pc, #12]	; (8001510 <USART2_Init+0x4c>)
 8001504:	f7ff ff27 	bl	8001356 <LL_USART_Enable>

}
 8001508:	bf00      	nop
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40004400 	.word	0x40004400

08001514 <I2C2_Init>:

void I2C2_Init(void){
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0
	LL_I2C_InitTypeDef I2C_InitStruct;
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 800151a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800151e:	f7ff fd57 	bl	8000fd0 <LL_APB1_GRP1_EnableClock>
	LL_I2C_Disable(I2C2);
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <I2C2_Init+0x4c>)
 8001524:	f7ff ff07 	bl	8001336 <LL_I2C_Disable>
	I2C_InitStruct.AnalogFilter=LL_I2C_ANALOGFILTER_ENABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
	I2C_InitStruct.DigitalFilter=0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
	I2C_InitStruct.OwnAddrSize=LL_I2C_OWNADDRESS1_7BIT;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
	I2C_InitStruct.OwnAddress1=0x02;
 8001534:	2302      	movs	r3, #2
 8001536:	617b      	str	r3, [r7, #20]
	I2C_InitStruct.PeripheralMode=LL_I2C_MODE_I2C;
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
	I2C_InitStruct.Timing=0x00B07CB4;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <I2C2_Init+0x50>)
 800153e:	60bb      	str	r3, [r7, #8]
	I2C_InitStruct.TypeAcknowledge=LL_I2C_NACK;
 8001540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001544:	61bb      	str	r3, [r7, #24]
	LL_I2C_Init(I2C2,&I2C_InitStruct);
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <I2C2_Init+0x4c>)
 800154c:	f7ff f847 	bl	80005de <LL_I2C_Init>
	LL_I2C_Enable(I2C2);
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <I2C2_Init+0x4c>)
 8001552:	f7ff fee0 	bl	8001316 <LL_I2C_Enable>

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40005800 	.word	0x40005800
 8001564:	00b07cb4 	.word	0x00b07cb4

08001568 <main>:
#include "main.h"
#include "Periph_Init.h"



int main(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800156c:	f7ff ff14 	bl	8001398 <SystemClock_Config>
	SPI2_Init();
 8001570:	f7ff ff76 	bl	8001460 <SPI2_Init>
	USART2_Init();
 8001574:	f7ff ffa6 	bl	80014c4 <USART2_Init>
	I2C2_Init();
 8001578:	f7ff ffcc 	bl	8001514 <I2C2_Init>
	while (1) {
 800157c:	e7fe      	b.n	800157c <main+0x14>
	...

08001580 <SysTick_Handler>:
//}

__IO uint32_t TimmingDelay;

void SysTick_Handler(void)
{	 if(TimmingDelay !=0)
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <SysTick_Handler+0x20>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <SysTick_Handler+0x16>
	{
		TimmingDelay --;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Handler+0x20>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <SysTick_Handler+0x20>)
 8001594:	6013      	str	r3, [r2, #0]
	}
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	20000064 	.word	0x20000064

080015a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4a17      	ldr	r2, [pc, #92]	; (8001608 <SystemInit+0x64>)
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <SystemInit+0x64>)
 80015ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015b8:	4a14      	ldr	r2, [pc, #80]	; (800160c <SystemInit+0x68>)
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <SystemInit+0x68>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <SystemInit+0x68>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015ca:	4a10      	ldr	r2, [pc, #64]	; (800160c <SystemInit+0x68>)
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <SystemInit+0x68>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015d4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015d8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <SystemInit+0x68>)
 80015dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SystemInit+0x68>)
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <SystemInit+0x68>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <SystemInit+0x68>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SystemInit+0x64>)
 80015f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015fa:	609a      	str	r2, [r3, #8]
#endif
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	40021000 	.word	0x40021000

08001610 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b087      	sub	sp, #28
 8001614:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	2302      	movs	r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	2302      	movs	r3, #2
 800162c:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 800162e:	4b4f      	ldr	r3, [pc, #316]	; (800176c <SystemCoreClockUpdate+0x15c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d107      	bne.n	800164a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800163a:	4b4c      	ldr	r3, [pc, #304]	; (800176c <SystemCoreClockUpdate+0x15c>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e005      	b.n	8001656 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800164a:	4b48      	ldr	r3, [pc, #288]	; (800176c <SystemCoreClockUpdate+0x15c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001656:	4a46      	ldr	r2, [pc, #280]	; (8001770 <SystemCoreClockUpdate+0x160>)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001660:	4b42      	ldr	r3, [pc, #264]	; (800176c <SystemCoreClockUpdate+0x15c>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d865      	bhi.n	8001738 <SystemCoreClockUpdate+0x128>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <SystemCoreClockUpdate+0x64>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	080016a9 	.word	0x080016a9
 8001678:	08001739 	.word	0x08001739
 800167c:	08001739 	.word	0x08001739
 8001680:	08001739 	.word	0x08001739
 8001684:	080016b1 	.word	0x080016b1
 8001688:	08001739 	.word	0x08001739
 800168c:	08001739 	.word	0x08001739
 8001690:	08001739 	.word	0x08001739
 8001694:	080016b9 	.word	0x080016b9
 8001698:	08001739 	.word	0x08001739
 800169c:	08001739 	.word	0x08001739
 80016a0:	08001739 	.word	0x08001739
 80016a4:	080016c1 	.word	0x080016c1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80016a8:	4a32      	ldr	r2, [pc, #200]	; (8001774 <SystemCoreClockUpdate+0x164>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6013      	str	r3, [r2, #0]
      break;
 80016ae:	e047      	b.n	8001740 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80016b0:	4b30      	ldr	r3, [pc, #192]	; (8001774 <SystemCoreClockUpdate+0x164>)
 80016b2:	4a31      	ldr	r2, [pc, #196]	; (8001778 <SystemCoreClockUpdate+0x168>)
 80016b4:	601a      	str	r2, [r3, #0]
      break;
 80016b6:	e043      	b.n	8001740 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <SystemCoreClockUpdate+0x164>)
 80016ba:	4a30      	ldr	r2, [pc, #192]	; (800177c <SystemCoreClockUpdate+0x16c>)
 80016bc:	601a      	str	r2, [r3, #0]
      break;
 80016be:	e03f      	b.n	8001740 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <SystemCoreClockUpdate+0x15c>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <SystemCoreClockUpdate+0x15c>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	3301      	adds	r3, #1
 80016d6:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d002      	beq.n	80016e4 <SystemCoreClockUpdate+0xd4>
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d006      	beq.n	80016f0 <SystemCoreClockUpdate+0xe0>
 80016e2:	e00b      	b.n	80016fc <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <SystemCoreClockUpdate+0x168>)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	613b      	str	r3, [r7, #16]
          break;
 80016ee:	e00b      	b.n	8001708 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80016f0:	4a22      	ldr	r2, [pc, #136]	; (800177c <SystemCoreClockUpdate+0x16c>)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f8:	613b      	str	r3, [r7, #16]
          break;
 80016fa:	e005      	b.n	8001708 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	613b      	str	r3, [r7, #16]
          break;
 8001706:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <SystemCoreClockUpdate+0x15c>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	fb02 f303 	mul.w	r3, r2, r3
 8001718:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <SystemCoreClockUpdate+0x15c>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	0e5b      	lsrs	r3, r3, #25
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	3301      	adds	r3, #1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <SystemCoreClockUpdate+0x164>)
 8001734:	6013      	str	r3, [r2, #0]
      break;
 8001736:	e003      	b.n	8001740 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <SystemCoreClockUpdate+0x164>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	6013      	str	r3, [r2, #0]
      break;
 800173e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <SystemCoreClockUpdate+0x15c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <SystemCoreClockUpdate+0x170>)
 800174c:	5cd3      	ldrb	r3, [r2, r3]
 800174e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <SystemCoreClockUpdate+0x164>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	fa22 f303 	lsr.w	r3, r2, r3
 800175a:	4a06      	ldr	r2, [pc, #24]	; (8001774 <SystemCoreClockUpdate+0x164>)
 800175c:	6013      	str	r3, [r2, #0]
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	08001850 	.word	0x08001850
 8001774:	20000000 	.word	0x20000000
 8001778:	00f42400 	.word	0x00f42400
 800177c:	007a1200 	.word	0x007a1200
 8001780:	08001838 	.word	0x08001838

08001784 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800179a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
	ldr	r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LoopForever+0x16>)
	cmp	r2, r3
 80017aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ae:	f7ff fef9 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f000 f811 	bl	80017d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b6:	f7ff fed7 	bl	8001568 <main>

080017ba <LoopForever>:

LoopForever:
    b LoopForever
 80017ba:	e7fe      	b.n	80017ba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017bc:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80017c0:	08001888 	.word	0x08001888
	ldr	r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017c8:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80017cc:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80017d0:	20000068 	.word	0x20000068

080017d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_IRQHandler>
	...

080017d8 <__libc_init_array>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	4e0d      	ldr	r6, [pc, #52]	; (8001810 <__libc_init_array+0x38>)
 80017dc:	4c0d      	ldr	r4, [pc, #52]	; (8001814 <__libc_init_array+0x3c>)
 80017de:	1ba4      	subs	r4, r4, r6
 80017e0:	10a4      	asrs	r4, r4, #2
 80017e2:	2500      	movs	r5, #0
 80017e4:	42a5      	cmp	r5, r4
 80017e6:	d109      	bne.n	80017fc <__libc_init_array+0x24>
 80017e8:	4e0b      	ldr	r6, [pc, #44]	; (8001818 <__libc_init_array+0x40>)
 80017ea:	4c0c      	ldr	r4, [pc, #48]	; (800181c <__libc_init_array+0x44>)
 80017ec:	f000 f818 	bl	8001820 <_init>
 80017f0:	1ba4      	subs	r4, r4, r6
 80017f2:	10a4      	asrs	r4, r4, #2
 80017f4:	2500      	movs	r5, #0
 80017f6:	42a5      	cmp	r5, r4
 80017f8:	d105      	bne.n	8001806 <__libc_init_array+0x2e>
 80017fa:	bd70      	pop	{r4, r5, r6, pc}
 80017fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001800:	4798      	blx	r3
 8001802:	3501      	adds	r5, #1
 8001804:	e7ee      	b.n	80017e4 <__libc_init_array+0xc>
 8001806:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800180a:	4798      	blx	r3
 800180c:	3501      	adds	r5, #1
 800180e:	e7f2      	b.n	80017f6 <__libc_init_array+0x1e>
 8001810:	08001880 	.word	0x08001880
 8001814:	08001880 	.word	0x08001880
 8001818:	08001880 	.word	0x08001880
 800181c:	08001884 	.word	0x08001884

08001820 <_init>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	bf00      	nop
 8001824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001826:	bc08      	pop	{r3}
 8001828:	469e      	mov	lr, r3
 800182a:	4770      	bx	lr

0800182c <_fini>:
 800182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182e:	bf00      	nop
 8001830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001832:	bc08      	pop	{r3}
 8001834:	469e      	mov	lr, r3
 8001836:	4770      	bx	lr
