
default_project01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ab0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000c3c  08000c3c  00010c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000064  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  20000068  20000068  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a04b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001167  00000000  00000000  0002a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000780  00000000  00000000  0002b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006f8  00000000  00000000  0002b968  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003169  00000000  00000000  0002c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b74  00000000  00000000  0002f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031d3d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ee0  00000000  00000000  00031dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000c24 	.word	0x08000c24

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	08000c24 	.word	0x08000c24

080001cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  uwTick++;
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <HAL_IncTick+0x18>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <HAL_IncTick+0x18>)
 80001d8:	6013      	str	r3, [r2, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr
 80001e4:	20000020 	.word	0x20000020

080001e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	691b      	ldr	r3, [r3, #16]
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d122      	bne.n	8000244 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	f003 0302 	and.w	r3, r3, #2
 8000208:	2b02      	cmp	r3, #2
 800020a:	d11b      	bne.n	8000244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f06f 0202 	mvn.w	r2, #2
 8000214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2201      	movs	r2, #1
 800021a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	699b      	ldr	r3, [r3, #24]
 8000222:	f003 0303 	and.w	r3, r3, #3
 8000226:	2b00      	cmp	r3, #0
 8000228:	d003      	beq.n	8000232 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800022a:	6878      	ldr	r0, [r7, #4]
 800022c:	f000 f8ee 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000230:	e005      	b.n	800023e <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000232:	6878      	ldr	r0, [r7, #4]
 8000234:	f000 f8e0 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f000 f8f1 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	691b      	ldr	r3, [r3, #16]
 800024a:	f003 0304 	and.w	r3, r3, #4
 800024e:	2b04      	cmp	r3, #4
 8000250:	d122      	bne.n	8000298 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	f003 0304 	and.w	r3, r3, #4
 800025c:	2b04      	cmp	r3, #4
 800025e:	d11b      	bne.n	8000298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f06f 0204 	mvn.w	r2, #4
 8000268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2202      	movs	r2, #2
 800026e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800027a:	2b00      	cmp	r3, #0
 800027c:	d003      	beq.n	8000286 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f000 f8c4 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8000284:	e005      	b.n	8000292 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 f8b6 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f000 f8c7 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2200      	movs	r2, #0
 8000296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	f003 0308 	and.w	r3, r3, #8
 80002a2:	2b08      	cmp	r3, #8
 80002a4:	d122      	bne.n	80002ec <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	2b08      	cmp	r3, #8
 80002b2:	d11b      	bne.n	80002ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f06f 0208 	mvn.w	r2, #8
 80002bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2204      	movs	r2, #4
 80002c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	69db      	ldr	r3, [r3, #28]
 80002ca:	f003 0303 	and.w	r3, r3, #3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80002d2:	6878      	ldr	r0, [r7, #4]
 80002d4:	f000 f89a 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 80002d8:	e005      	b.n	80002e6 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80002da:	6878      	ldr	r0, [r7, #4]
 80002dc:	f000 f88c 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80002e0:	6878      	ldr	r0, [r7, #4]
 80002e2:	f000 f89d 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2200      	movs	r2, #0
 80002ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	691b      	ldr	r3, [r3, #16]
 80002f2:	f003 0310 	and.w	r3, r3, #16
 80002f6:	2b10      	cmp	r3, #16
 80002f8:	d122      	bne.n	8000340 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	2b10      	cmp	r3, #16
 8000306:	d11b      	bne.n	8000340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f06f 0210 	mvn.w	r2, #16
 8000310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2208      	movs	r2, #8
 8000316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000322:	2b00      	cmp	r3, #0
 8000324:	d003      	beq.n	800032e <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000326:	6878      	ldr	r0, [r7, #4]
 8000328:	f000 f870 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 800032c:	e005      	b.n	800033a <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f000 f862 	bl	80003f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f000 f873 	bl	8000420 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2200      	movs	r2, #0
 800033e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b01      	cmp	r3, #1
 800034c:	d10e      	bne.n	800036c <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	f003 0301 	and.w	r3, r3, #1
 8000358:	2b01      	cmp	r3, #1
 800035a:	d107      	bne.n	800036c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f06f 0201 	mvn.w	r2, #1
 8000364:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000366:	6878      	ldr	r0, [r7, #4]
 8000368:	f000 f882 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000376:	2b80      	cmp	r3, #128	; 0x80
 8000378:	d10e      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	d107      	bne.n	8000398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000390:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f000 f862 	bl	800045c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	691b      	ldr	r3, [r3, #16]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d10e      	bne.n	80003c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	68db      	ldr	r3, [r3, #12]
 80003ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b0:	2b40      	cmp	r3, #64	; 0x40
 80003b2:	d107      	bne.n	80003c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80003bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80003be:	6878      	ldr	r0, [r7, #4]
 80003c0:	f000 f838 	bl	8000434 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	691b      	ldr	r3, [r3, #16]
 80003ca:	f003 0320 	and.w	r3, r3, #32
 80003ce:	2b20      	cmp	r3, #32
 80003d0:	d10e      	bne.n	80003f0 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	2b20      	cmp	r3, #32
 80003de:	d107      	bne.n	80003f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f06f 0220 	mvn.w	r2, #32
 80003e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f000 f82c 	bl	8000448 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr

08000434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8000478:	f7ff fea8 	bl	80001cc <HAL_IncTick>
}
 800047c:	bf00      	nop
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}

08000484 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <TIM6_DAC_IRQHandler+0x10>)
 800048a:	f7ff fead 	bl	80001e8 <HAL_TIM_IRQHandler>
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000024 	.word	0x20000024

08000498 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <NVIC_GetPriorityGrouping+0x18>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	f003 0307 	and.w	r3, r3, #7
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80004c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da0b      	bge.n	80004e0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c8:	490d      	ldr	r1, [pc, #52]	; (8000500 <NVIC_SetPriority+0x4c>)
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	f003 030f 	and.w	r3, r3, #15
 80004d0:	3b04      	subs	r3, #4
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	b2d2      	uxtb	r2, r2
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	440b      	add	r3, r1
 80004dc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004de:	e009      	b.n	80004f4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e0:	4908      	ldr	r1, [pc, #32]	; (8000504 <NVIC_SetPriority+0x50>)
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	b2d2      	uxtb	r2, r2
 80004ea:	0112      	lsls	r2, r2, #4
 80004ec:	b2d2      	uxtb	r2, r2
 80004ee:	440b      	add	r3, r1
 80004f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000ed00 	.word	0xe000ed00
 8000504:	e000e100 	.word	0xe000e100

08000508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000508:	b480      	push	{r7}
 800050a:	b089      	sub	sp, #36	; 0x24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	f1c3 0307 	rsb	r3, r3, #7
 8000522:	2b04      	cmp	r3, #4
 8000524:	bf28      	it	cs
 8000526:	2304      	movcs	r3, #4
 8000528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800052a:	69fb      	ldr	r3, [r7, #28]
 800052c:	3304      	adds	r3, #4
 800052e:	2b06      	cmp	r3, #6
 8000530:	d902      	bls.n	8000538 <NVIC_EncodePriority+0x30>
 8000532:	69fb      	ldr	r3, [r7, #28]
 8000534:	3b03      	subs	r3, #3
 8000536:	e000      	b.n	800053a <NVIC_EncodePriority+0x32>
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800053c:	2201      	movs	r2, #1
 800053e:	69bb      	ldr	r3, [r7, #24]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	401a      	ands	r2, r3
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800054e:	2101      	movs	r1, #1
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	fa01 f303 	lsl.w	r3, r1, r3
 8000556:	1e59      	subs	r1, r3, #1
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800055c:	4313      	orrs	r3, r2
         );
}
 800055e:	4618      	mov	r0, r3
 8000560:	3724      	adds	r7, #36	; 0x24
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3b01      	subs	r3, #1
 8000578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800057c:	d301      	bcc.n	8000582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800057e:	2301      	movs	r3, #1
 8000580:	e00f      	b.n	80005a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <SysTick_Config+0x40>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	3b01      	subs	r3, #1
 8000588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800058a:	210f      	movs	r1, #15
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f7ff ff90 	bl	80004b4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <SysTick_Config+0x40>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <SysTick_Config+0x40>)
 800059c:	2207      	movs	r2, #7
 800059e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	e000e010 	.word	0xe000e010

080005b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005b8:	4908      	ldr	r1, [pc, #32]	; (80005dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80005bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80005c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ce:	68fb      	ldr	r3, [r7, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005e8:	4908      	ldr	r1, [pc, #32]	; (800060c <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <LL_APB2_GRP1_EnableClock+0x2c>)
 80005f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d106      	bne.n	800062c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800062a:	e005      	b.n	8000638 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_SYSTICK_SetClkSource+0x34>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	e000e010 	.word	0xe000e010

08000648 <LL_SYSTICK_DisableIT>:
  * @brief  Disable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_DisableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_DisableIT(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <LL_SYSTICK_DisableIT+0x1c>)
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <LL_SYSTICK_DisableIT+0x1c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f023 0302 	bic.w	r3, r3, #2
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e010 	.word	0xe000e010

08000668 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800066c:	4a05      	ldr	r2, [pc, #20]	; (8000684 <LL_RCC_HSE_EnableBypass+0x1c>)
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <LL_RCC_HSE_EnableBypass+0x1c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800068c:	4a05      	ldr	r2, [pc, #20]	; (80006a4 <LL_RCC_HSE_Enable+0x1c>)
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <LL_RCC_HSE_Enable+0x1c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <LL_RCC_HSE_IsReady+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006b8:	bf0c      	ite	eq
 80006ba:	2301      	moveq	r3, #1
 80006bc:	2300      	movne	r3, #0
 80006be:	b2db      	uxtb	r3, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <LL_RCC_SetSysClkSource+0x24>)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <LL_RCC_SetSysClkSource+0x24>)
 80006dc:	689b      	ldr	r3, [r3, #8]
 80006de:	f023 0203 	bic.w	r2, r3, #3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	608b      	str	r3, [r1, #8]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000

080006f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <LL_RCC_GetSysClkSource+0x18>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f003 030c 	and.w	r3, r3, #12
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800071c:	4906      	ldr	r1, [pc, #24]	; (8000738 <LL_RCC_SetAHBPrescaler+0x24>)
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <LL_RCC_SetAHBPrescaler+0x24>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	608b      	str	r3, [r1, #8]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	40021000 	.word	0x40021000

0800073c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	608b      	str	r3, [r1, #8]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000

08000764 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800076c:	4906      	ldr	r1, [pc, #24]	; (8000788 <LL_RCC_SetAPB2Prescaler+0x24>)
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000770:	689b      	ldr	r3, [r3, #8]
 8000772:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4313      	orrs	r3, r2
 800077a:	608b      	str	r3, [r1, #8]
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO1_DIV_8
  *         @arg @ref LL_RCC_MCO1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_MCOSEL | RCC_CFGR_MCOPRE, MCOxSource | MCOxPrescaler);
 8000796:	4808      	ldr	r0, [pc, #32]	; (80007b8 <LL_RCC_ConfigMCO+0x2c>)
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <LL_RCC_ConfigMCO+0x2c>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	430b      	orrs	r3, r1
 80007a6:	4313      	orrs	r3, r2
 80007a8:	6083      	str	r3, [r0, #8]
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U)); 
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	0e1a      	lsrs	r2, r3, #24
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <LL_RCC_SetI2CClockSource+0x48>)
 80007ca:	4413      	add	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3U << ((I2CxSource & 0x00FF0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x00FF0000U) >> 16U)));
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	0c1b      	lsrs	r3, r3, #16
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2103      	movs	r1, #3
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	401a      	ands	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	b2d9      	uxtb	r1, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	0c1b      	lsrs	r3, r3, #16
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	431a      	orrs	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021088 	.word	0x40021088

08000808 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800080c:	4a05      	ldr	r2, [pc, #20]	; (8000824 <LL_RCC_PLL_Enable+0x1c>)
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <LL_RCC_PLL_Enable+0x1c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <LL_RCC_PLL_IsReady+0x24>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000838:	bf0c      	ite	eq
 800083a:	2301      	moveq	r3, #1
 800083c:	2300      	movne	r3, #0
 800083e:	b2db      	uxtb	r3, r3
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000

08000850 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
 800085c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000866:	4013      	ands	r3, r2
 8000868:	68f9      	ldr	r1, [r7, #12]
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	4311      	orrs	r1, r2
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	0212      	lsls	r2, r2, #8
 8000872:	4311      	orrs	r1, r2
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	430a      	orrs	r2, r1
 8000878:	4313      	orrs	r3, r2
 800087a:	60c3      	str	r3, [r0, #12]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLR);
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	f9ff808c 	.word	0xf9ff808c

08000890 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000

080008b0 <SystemClock_Config>:
#include "Periph_Init.h"
#include "main.h"
#include "stm32l4xx.h"

void SystemClock_Config(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fe93 	bl	80005e0 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80008ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80008be:	f7ff fe77 	bl	80005b0 <LL_APB1_GRP1_EnableClock>

	LL_RCC_HSE_Enable();
 80008c2:	f7ff fee1 	bl	8000688 <LL_RCC_HSE_Enable>
	LL_RCC_HSE_EnableBypass();
 80008c6:	f7ff fecf 	bl	8000668 <LL_RCC_HSE_EnableBypass>

	while (LL_RCC_HSE_IsReady() != 1) {}
 80008ca:	bf00      	nop
 80008cc:	f7ff feec 	bl	80006a8 <LL_RCC_HSE_IsReady>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1fa      	bne.n	80008cc <SystemClock_Config+0x1c>

	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_1, 16,LL_RCC_PLLR_DIV_4);
 80008d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008da:	2210      	movs	r2, #16
 80008dc:	2100      	movs	r1, #0
 80008de:	2003      	movs	r0, #3
 80008e0:	f7ff ffb6 	bl	8000850 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_EnableDomain_SYS();
 80008e4:	f7ff ffd4 	bl	8000890 <LL_RCC_PLL_EnableDomain_SYS>
	LL_RCC_PLL_Enable();
 80008e8:	f7ff ff8e 	bl	8000808 <LL_RCC_PLL_Enable>

	while (LL_RCC_PLL_IsReady() != 1) {}
 80008ec:	bf00      	nop
 80008ee:	f7ff ff9b 	bl	8000828 <LL_RCC_PLL_IsReady>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d1fa      	bne.n	80008ee <SystemClock_Config+0x3e>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f7ff fee9 	bl	80006d0 <LL_RCC_SetSysClkSource>

	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {}
 80008fe:	bf00      	nop
 8000900:	f7ff fefa 	bl	80006f8 <LL_RCC_GetSysClkSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b0c      	cmp	r3, #12
 8000908:	d1fa      	bne.n	8000900 <SystemClock_Config+0x50>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff02 	bl	8000714 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000910:	2000      	movs	r0, #0
 8000912:	f7ff ff13 	bl	800073c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ff24 	bl	8000764 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 800091c:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 8000920:	f7ff ff4c 	bl	80007bc <LL_RCC_SetI2CClockSource>

	LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_SYSCLK, LL_RCC_MCO1_DIV_1);
 8000924:	2100      	movs	r1, #0
 8000926:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800092a:	f7ff ff2f 	bl	800078c <LL_RCC_ConfigMCO>

	SystemCoreClockUpdate();
 800092e:	f000 f871 	bl	8000a14 <SystemCoreClockUpdate>

	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000932:	2004      	movs	r0, #4
 8000934:	f7ff fe6c 	bl	8000610 <LL_SYSTICK_SetClkSource>
	SysTick_Config(SystemCoreClock / 100000);
 8000938:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <SystemClock_Config+0xc0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	095b      	lsrs	r3, r3, #5
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <SystemClock_Config+0xc4>)
 8000940:	fba2 2303 	umull	r2, r3, r2, r3
 8000944:	09db      	lsrs	r3, r3, #7
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe10 	bl	800056c <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn,NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 800094c:	f7ff fda4 	bl	8000498 <NVIC_GetPriorityGrouping>
 8000950:	4603      	mov	r3, r0
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fdd6 	bl	8000508 <NVIC_EncodePriority>
 800095c:	4603      	mov	r3, r0
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	f7ff fda6 	bl	80004b4 <NVIC_SetPriority>
	LL_SYSTICK_DisableIT();
 8000968:	f7ff fe6e 	bl	8000648 <LL_SYSTICK_DisableIT>

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	0a7c5ac5 	.word	0x0a7c5ac5

08000978 <main>:
#include "main.h"
#include "Periph_Init.h"
#include "stm32l4xx_ll_gpio.h"
#include "stm32l4xx_ll_bus.h"

int main(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800097c:	f7ff ff98 	bl	80008b0 <SystemClock_Config>


	while (1) {
 8000980:	e7fe      	b.n	8000980 <main+0x8>
	...

08000984 <SysTick_Handler>:
//}

__IO uint32_t TimmingDelay;

void SysTick_Handler(void)
{	 if(TimmingDelay !=0)
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <SysTick_Handler+0x20>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d004      	beq.n	800099a <SysTick_Handler+0x16>
	{
		TimmingDelay --;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Handler+0x20>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3b01      	subs	r3, #1
 8000996:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <SysTick_Handler+0x20>)
 8000998:	6013      	str	r3, [r2, #0]
	}
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	20000064 	.word	0x20000064

080009a8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <SystemInit+0x64>)
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <SystemInit+0x64>)
 80009b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009bc:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <SystemInit+0x68>)
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <SystemInit+0x68>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <SystemInit+0x68>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <SystemInit+0x68>)
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <SystemInit+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <SystemInit+0x68>)
 80009e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SystemInit+0x68>)
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <SystemInit+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <SystemInit+0x68>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SystemInit+0x64>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00
 8000a10:	40021000 	.word	0x40021000

08000a14 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	2302      	movs	r3, #2
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	2302      	movs	r3, #2
 8000a30:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8000a32:	4b4f      	ldr	r3, [pc, #316]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0308 	and.w	r3, r3, #8
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d107      	bne.n	8000a4e <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000a3e:	4b4c      	ldr	r3, [pc, #304]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e005      	b.n	8000a5a <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000a4e:	4b48      	ldr	r3, [pc, #288]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000a5a:	4a46      	ldr	r2, [pc, #280]	; (8000b74 <SystemCoreClockUpdate+0x160>)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a64:	4b42      	ldr	r3, [pc, #264]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f003 030c 	and.w	r3, r3, #12
 8000a6c:	2b0c      	cmp	r3, #12
 8000a6e:	d865      	bhi.n	8000b3c <SystemCoreClockUpdate+0x128>
 8000a70:	a201      	add	r2, pc, #4	; (adr r2, 8000a78 <SystemCoreClockUpdate+0x64>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000aad 	.word	0x08000aad
 8000a7c:	08000b3d 	.word	0x08000b3d
 8000a80:	08000b3d 	.word	0x08000b3d
 8000a84:	08000b3d 	.word	0x08000b3d
 8000a88:	08000ab5 	.word	0x08000ab5
 8000a8c:	08000b3d 	.word	0x08000b3d
 8000a90:	08000b3d 	.word	0x08000b3d
 8000a94:	08000b3d 	.word	0x08000b3d
 8000a98:	08000abd 	.word	0x08000abd
 8000a9c:	08000b3d 	.word	0x08000b3d
 8000aa0:	08000b3d 	.word	0x08000b3d
 8000aa4:	08000b3d 	.word	0x08000b3d
 8000aa8:	08000ac5 	.word	0x08000ac5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000aac:	4a32      	ldr	r2, [pc, #200]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	6013      	str	r3, [r2, #0]
      break;
 8000ab2:	e047      	b.n	8000b44 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000ab6:	4a31      	ldr	r2, [pc, #196]	; (8000b7c <SystemCoreClockUpdate+0x168>)
 8000ab8:	601a      	str	r2, [r3, #0]
      break;
 8000aba:	e043      	b.n	8000b44 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000abe:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <SystemCoreClockUpdate+0x16c>)
 8000ac0:	601a      	str	r2, [r3, #0]
      break;
 8000ac2:	e03f      	b.n	8000b44 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ac4:	4b2a      	ldr	r3, [pc, #168]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	f003 0303 	and.w	r3, r3, #3
 8000acc:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	f003 0307 	and.w	r3, r3, #7
 8000ad8:	3301      	adds	r3, #1
 8000ada:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b02      	cmp	r3, #2
 8000ae0:	d002      	beq.n	8000ae8 <SystemCoreClockUpdate+0xd4>
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d006      	beq.n	8000af4 <SystemCoreClockUpdate+0xe0>
 8000ae6:	e00b      	b.n	8000b00 <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000ae8:	4a24      	ldr	r2, [pc, #144]	; (8000b7c <SystemCoreClockUpdate+0x168>)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af0:	613b      	str	r3, [r7, #16]
          break;
 8000af2:	e00b      	b.n	8000b0c <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000af4:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <SystemCoreClockUpdate+0x16c>)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	613b      	str	r3, [r7, #16]
          break;
 8000afe:	e005      	b.n	8000b0c <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b08:	613b      	str	r3, [r7, #16]
          break;
 8000b0a:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	0e5b      	lsrs	r3, r3, #25
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	3301      	adds	r3, #1
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000b38:	6013      	str	r3, [r2, #0]
      break;
 8000b3a:	e003      	b.n	8000b44 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	6013      	str	r3, [r2, #0]
      break;
 8000b42:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <SystemCoreClockUpdate+0x15c>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <SystemCoreClockUpdate+0x170>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <SystemCoreClockUpdate+0x164>)
 8000b60:	6013      	str	r3, [r2, #0]
}
 8000b62:	bf00      	nop
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	08000c4c 	.word	0x08000c4c
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	00f42400 	.word	0x00f42400
 8000b80:	007a1200 	.word	0x007a1200
 8000b84:	08000c3c 	.word	0x08000c3c

08000b88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ba6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000bae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff fef9 	bl	80009a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f000 f811 	bl	8000bdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bba:	f7ff fedd 	bl	8000978 <main>

08000bbe <LoopForever>:

LoopForever:
    b LoopForever
 8000bbe:	e7fe      	b.n	8000bbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bc0:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8000bc4:	08000c84 	.word	0x08000c84
	ldr	r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bcc:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000bd0:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000bd4:	20000068 	.word	0x20000068

08000bd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_IRQHandler>
	...

08000bdc <__libc_init_array>:
 8000bdc:	b570      	push	{r4, r5, r6, lr}
 8000bde:	4e0d      	ldr	r6, [pc, #52]	; (8000c14 <__libc_init_array+0x38>)
 8000be0:	4c0d      	ldr	r4, [pc, #52]	; (8000c18 <__libc_init_array+0x3c>)
 8000be2:	1ba4      	subs	r4, r4, r6
 8000be4:	10a4      	asrs	r4, r4, #2
 8000be6:	2500      	movs	r5, #0
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	d109      	bne.n	8000c00 <__libc_init_array+0x24>
 8000bec:	4e0b      	ldr	r6, [pc, #44]	; (8000c1c <__libc_init_array+0x40>)
 8000bee:	4c0c      	ldr	r4, [pc, #48]	; (8000c20 <__libc_init_array+0x44>)
 8000bf0:	f000 f818 	bl	8000c24 <_init>
 8000bf4:	1ba4      	subs	r4, r4, r6
 8000bf6:	10a4      	asrs	r4, r4, #2
 8000bf8:	2500      	movs	r5, #0
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	d105      	bne.n	8000c0a <__libc_init_array+0x2e>
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}
 8000c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c04:	4798      	blx	r3
 8000c06:	3501      	adds	r5, #1
 8000c08:	e7ee      	b.n	8000be8 <__libc_init_array+0xc>
 8000c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c0e:	4798      	blx	r3
 8000c10:	3501      	adds	r5, #1
 8000c12:	e7f2      	b.n	8000bfa <__libc_init_array+0x1e>
 8000c14:	08000c7c 	.word	0x08000c7c
 8000c18:	08000c7c 	.word	0x08000c7c
 8000c1c:	08000c7c 	.word	0x08000c7c
 8000c20:	08000c80 	.word	0x08000c80

08000c24 <_init>:
 8000c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c26:	bf00      	nop
 8000c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2a:	bc08      	pop	{r3}
 8000c2c:	469e      	mov	lr, r3
 8000c2e:	4770      	bx	lr

08000c30 <_fini>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	bf00      	nop
 8000c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c36:	bc08      	pop	{r3}
 8000c38:	469e      	mov	lr, r3
 8000c3a:	4770      	bx	lr
